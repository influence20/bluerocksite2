{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/src/jobs/cronJobs.ts">\nimport cron from \'node-cron\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { logger } from \'../utils/logger\';\nimport { sendEmail } from \'../utils/email\';\nimport { formatCurrency } from \'../utils/investment\';\n\nconst prisma = new PrismaClient();\n\n/**\n * Process weekly payouts every Friday at 12:00 PM UTC\n */\nexport const processWeeklyPayouts = async () => {\n  try {\n    logger.info(\'Starting weekly payout processing...\');\n\n    const today = new Date();\n    today.setUTCHours(0, 0, 0, 0);\n\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    // Find all scheduled payouts for today\n    const scheduledPayouts = await prisma.payout.findMany({\n      where: {\n        status: \'SCHEDULED\',\n        scheduledDate: {\n          gte: today,\n          lt: tomorrow,\n        },\n      },\n      include: {\n        investmentPlan: {\n          include: {\n            user: true,\n          },\n        },\n      },\n    });\n\n    logger.info(`Found ${scheduledPayouts.length} payouts to process`);\n\n    for (const payout of scheduledPayouts) {\n      try {\n        // Update payout status to processing\n        await prisma.payout.update({\n          where: { id: payout.id },\n          data: {\n            status: \'PROCESSING\',\n            paidDate: new Date(),\n          },\n        });\n\n        // Add to user balance\n        await prisma.user.update({\n          where: { id: payout.investmentPlan.userId },\n          data: {\n            balance: {\n              increment: payout.amount,\n            },\n            totalEarnings: {\n              increment: payout.amount,\n            },\n          },\n        });\n\n        // Create transaction record\n        await prisma.transaction.create({\n          data: {\n            userId: payout.investmentPlan.userId,\n            type: \'PAYOUT\',\n            amount: payout.amount,\n            description: `Weekly payout - Week ${payout.weekNumber}`,\n            reference: `PAYOUT-${payout.id}`,\n            status: \'COMPLETED\',\n          },\n        });\n\n        // Update investment plan\n        const updatedPlan = await prisma.investmentPlan.update({\n          where: { id: payout.investmentPlanId },\n          data: {\n            completedPayouts: {\n              increment: 1,\n            },\n            nextPayoutDate: payout.weekNumber < 8 ? \n              new Date(payout.scheduledDate.getTime() + 7 * 24 * 60 * 60 * 1000) : \n              null,\n            status: payout.weekNumber >= 8 ? \'COMPLETED\' : \'ACTIVE\',\n          },\n        });\n\n        // Mark payout as completed\n        await prisma.payout.update({\n          where: { id: payout.id },\n          data: {\n            status: \'COMPLETED\',\n          },\n        });\n\n        // Send email notification\n        const nextPayoutDate = payout.weekNumber < 8 ? \n          new Date(payout.scheduledDate.getTime() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString() :\n          \'Plan Completed\';\n\n        await sendEmail({\n          to: payout.investmentPlan.user.email,\n          template: \'weeklyPayout\',\n          data: {\n            firstName: payout.investmentPlan.user.firstName,\n            amount: formatCurrency(payout.amount).replace(\'$\', \'\'),\n            weekNumber: payout.weekNumber,\n            payoutDate: payout.scheduledDate.toLocaleDateString(),\n            nextPayoutDate,\n            dashboardUrl: `${process.env.FRONTEND_URL}/dashboard`,\n            logoUrl: `${process.env.FRONTEND_URL}/assets/brand/bluerock-logo.png`,\n          },\n        });\n\n        logger.info(`Processed payout ${payout.id} for user ${payout.investmentPlan.user.email}`);\n\n      } catch (error) {\n        logger.error(`Failed to process payout ${payout.id}:`, error);\n        \n        // Mark payout as failed\n        await prisma.payout.update({\n          where: { id: payout.id },\n          data: {\n            status: \'FAILED\',\n          },\n        });\n      }\n    }\n\n    logger.info(\'Weekly payout processing completed\');\n\n  } catch (error) {\n    logger.error(\'Error in weekly payout processing:\', error);\n  }\n};\n\n/**\n * Clean up expired withdrawal PINs every hour\n */\nexport const cleanupExpiredPins = async () => {\n  try {\n    const now = new Date();\n    \n    const expiredPins = await prisma.withdrawalPin.updateMany({\n      where: {\n        expiresAt: {\n          lt: now,\n        },\n        isUsed: false,\n      },\n      data: {\n        isUsed: true, // Mark as used to prevent reuse\n      },\n    });\n\n    if (expiredPins.count > 0) {\n      logger.info(`Cleaned up ${expiredPins.count} expired withdrawal PINs`);\n    }\n\n  } catch (error) {\n    logger.error(\'Error cleaning up expired PINs:\', error);\n  }\n};\n\n/**\n * Send daily summary report to admins\n */\nexport const sendDailySummary = async () => {\n  try {\n    const today = new Date();\n    today.setUTCHours(0, 0, 0, 0);\n\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    // Get daily statistics\n    const stats = await Promise.all([\n      prisma.user.count({ where: { createdAt: { gte: today, lt: tomorrow } } }),\n      prisma.deposit.count({ where: { createdAt: { gte: today, lt: tomorrow } } }),\n      prisma.withdrawal.count({ where: { createdAt: { gte: today, lt: tomorrow } } }),\n      prisma.payout.count({ where: { paidDate: { gte: today, lt: tomorrow } } }),\n    ]);\n\n    const [newUsers, newDeposits, newWithdrawals, processedPayouts] = stats;\n\n    logger.info(`Daily Summary - New Users: ${newUsers}, Deposits: ${newDeposits}, Withdrawals: ${newWithdrawals}, Payouts: ${processedPayouts}`);\n\n  } catch (error) {\n    logger.error(\'Error generating daily summary:\', error);\n  }\n};\n\n/**\n * Start all cron jobs\n */\nexport const startCronJobs = () => {\n  // Weekly payouts every Friday at 12:00 PM UTC\n  cron.schedule(\'0 12 * * 5\', processWeeklyPayouts, {\n    timezone: \'UTC\',\n  });\n\n  // Clean up expired PINs every hour\n  cron.schedule(\'0 * * * *\', cleanupExpiredPins, {\n    timezone: \'UTC\',\n  });\n\n  // Daily summary at 11:59 PM UTC\n  cron.schedule(\'59 23 * * *\', sendDailySummary, {\n    timezone: \'UTC\',\n  });\n\n  logger.info(\'Cron jobs scheduled successfully\');\n};\n</create-file>\n</function_calls>'}