{'role': 'assistant', 'content': 'Now let me set up the database schema and backend infrastructure:\n\n<function_calls>\n<create-file file_path="backend/prisma/schema.prisma">\n// BlueRock Asset Management Database Schema\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id                String   @id @default(uuid())\n  email             String   @unique\n  password          String\n  firstName         String\n  lastName          String\n  phone             String?\n  country           String?\n  isActive          Boolean  @default(true)\n  isVerified        Boolean  @default(false)\n  balance           Decimal  @default(0) @db.Decimal(15, 2)\n  totalInvested     Decimal  @default(0) @db.Decimal(15, 2)\n  totalEarnings     Decimal  @default(0) @db.Decimal(15, 2)\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n  lastLoginAt       DateTime?\n\n  // Relations\n  deposits          Deposit[]\n  withdrawals       Withdrawal[]\n  investmentPlans   InvestmentPlan[]\n  transactions      Transaction[]\n  withdrawalPins    WithdrawalPin[]\n\n  @@map("users")\n}\n\nmodel AdminUser {\n  id          String   @id @default(uuid())\n  email       String   @unique\n  password    String\n  firstName   String\n  lastName    String\n  role        AdminRole @default(ADMIN)\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  lastLoginAt DateTime?\n\n  // Relations\n  auditLogs   AuditLog[]\n\n  @@map("admin_users")\n}\n\nenum AdminRole {\n  SUPER_ADMIN\n  ADMIN\n  SUPPORT\n}\n\nmodel Deposit {\n  id              String        @id @default(uuid())\n  userId          String\n  amount          Decimal       @db.Decimal(15, 2)\n  cryptoType      CryptoType\n  walletAddress   String\n  transactionId   String?\n  status          DepositStatus @default(PENDING)\n  confirmedAt     DateTime?\n  confirmedBy     String?\n  notes           String?\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @updatedAt\n\n  // Relations\n  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  investmentPlan  InvestmentPlan?\n\n  @@map("deposits")\n}\n\nenum DepositStatus {\n  PENDING\n  CONFIRMED\n  REJECTED\n}\n\nenum CryptoType {\n  BTC\n  ETH\n  BNB\n  USDT_ERC20\n  USDT_BEP20\n  USDT_TRC20\n}\n\nmodel Withdrawal {\n  id              String           @id @default(uuid())\n  userId          String\n  amount          Decimal          @db.Decimal(15, 2)\n  cryptoType      CryptoType\n  walletAddress   String\n  status          WithdrawalStatus @default(PENDING)\n  requestedAt     DateTime         @default(now())\n  processedAt     DateTime?\n  processedBy     String?\n  transactionId   String?\n  notes           String?\n  pinId           String?\n  createdAt       DateTime         @default(now())\n  updatedAt       DateTime         @updatedAt\n\n  // Relations\n  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  pin             WithdrawalPin? @relation(fields: [pinId], references: [id])\n\n  @@map("withdrawals")\n}\n\nenum WithdrawalStatus {\n  PENDING\n  PIN_REQUIRED\n  APPROVED\n  PROCESSING\n  COMPLETED\n  REJECTED\n}\n\nmodel WithdrawalPin {\n  id          String    @id @default(uuid())\n  userId      String\n  pin         String\n  isUsed      Boolean   @default(false)\n  expiresAt   DateTime\n  usedAt      DateTime?\n  createdAt   DateTime  @default(now())\n\n  // Relations\n  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  withdrawals Withdrawal[]\n\n  @@map("withdrawal_pins")\n}\n\nmodel InvestmentPlan {\n  id              String              @id @default(uuid())\n  userId          String\n  depositId       String              @unique\n  amount          Decimal             @db.Decimal(15, 2)\n  weeklyPayout    Decimal             @db.Decimal(15, 2)\n  totalPayouts    Int                 @default(8)\n  completedPayouts Int                @default(0)\n  status          InvestmentPlanStatus @default(ACTIVE)\n  startDate       DateTime\n  endDate         DateTime\n  nextPayoutDate  DateTime\n  createdAt       DateTime            @default(now())\n  updatedAt       DateTime            @updatedAt\n\n  // Relations\n  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  deposit         Deposit @relation(fields: [depositId], references: [id])\n  payouts         Payout[]\n\n  @@map("investment_plans")\n}\n\nenum InvestmentPlanStatus {\n  ACTIVE\n  COMPLETED\n  CANCELLED\n}\n\nmodel Payout {\n  id               String   @id @default(uuid())\n  investmentPlanId String\n  amount           Decimal  @db.Decimal(15, 2)\n  weekNumber       Int\n  scheduledDate    DateTime\n  paidDate         DateTime?\n  status           PayoutStatus @default(SCHEDULED)\n  transactionId    String?\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  // Relations\n  investmentPlan   InvestmentPlan @relation(fields: [investmentPlanId], references: [id], onDelete: Cascade)\n\n  @@map("payouts")\n}\n\nenum PayoutStatus {\n  SCHEDULED\n  PROCESSING\n  COMPLETED\n  FAILED\n}\n\nmodel Transaction {\n  id          String          @id @default(uuid())\n  userId      String\n  type        TransactionType\n  amount      Decimal         @db.Decimal(15, 2)\n  description String\n  reference   String?\n  status      TransactionStatus @default(COMPLETED)\n  createdAt   DateTime        @default(now())\n\n  // Relations\n  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("transactions")\n}\n\nenum TransactionType {\n  DEPOSIT\n  WITHDRAWAL\n  PAYOUT\n  BONUS\n  FEE\n}\n\nenum TransactionStatus {\n  PENDING\n  COMPLETED\n  FAILED\n  CANCELLED\n}\n\nmodel AuditLog {\n  id          String   @id @default(uuid())\n  adminUserId String\n  action      String\n  entity      String\n  entityId    String?\n  oldValues   Json?\n  newValues   Json?\n  ipAddress   String?\n  userAgent   String?\n  createdAt   DateTime @default(now())\n\n  // Relations\n  adminUser   AdminUser @relation(fields: [adminUserId], references: [id])\n\n  @@map("audit_logs")\n}\n\nmodel EmailLog {\n  id          String      @id @default(uuid())\n  to          String\n  subject     String\n  template    String\n  status      EmailStatus @default(PENDING)\n  sentAt      DateTime?\n  error       String?\n  retryCount  Int         @default(0)\n  createdAt   DateTime    @default(now())\n  updatedAt   DateTime    @updatedAt\n\n  @@map("email_logs")\n}\n\nenum EmailStatus {\n  PENDING\n  SENT\n  FAILED\n  BOUNCED\n}\n\nmodel SystemSetting {\n  id          String   @id @default(uuid())\n  key         String   @unique\n  value       String\n  description String?\n  updatedAt   DateTime @updatedAt\n  updatedBy   String?\n\n  @@map("system_settings")\n}\n</create-file>\n</function_calls>'}