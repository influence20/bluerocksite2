{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/src/routes/user.ts">\nimport express from \'express\';\nimport { body, validationResult } from \'express-validator\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { authenticateUser, AuthRequest } from \'../middleware/auth\';\nimport { asyncHandler, createError } from \'../middleware/errorHandler\';\nimport { validateWalletAddress } from \'../utils/investment\';\nimport { sendEmail } from \'../utils/email\';\nimport { logger } from \'../utils/logger\';\nimport crypto from \'crypto\';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Get user dashboard data\nrouter.get(\'/dashboard\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: {\n      id: true,\n      email: true,\n      firstName: true,\n      lastName: true,\n      balance: true,\n      totalInvested: true,\n      totalEarnings: true,\n      createdAt: true,\n    },\n  });\n\n  if (!user) {\n    throw createError(\'User not found\', 404);\n  }\n\n  // Get active investment plans\n  const activeInvestments = await prisma.investmentPlan.findMany({\n    where: { \n      userId,\n      status: \'ACTIVE\',\n    },\n    include: {\n      deposit: {\n        select: {\n          amount: true,\n          cryptoType: true,\n          createdAt: true,\n        },\n      },\n      payouts: {\n        where: { status: \'COMPLETED\' },\n        orderBy: { weekNumber: \'asc\' },\n      },\n    },\n    orderBy: { createdAt: \'desc\' },\n  });\n\n  // Get recent transactions\n  const recentTransactions = await prisma.transaction.findMany({\n    where: { userId },\n    orderBy: { createdAt: \'desc\' },\n    take: 10,\n  });\n\n  // Get pending deposits\n  const pendingDeposits = await prisma.deposit.findMany({\n    where: { \n      userId,\n      status: \'PENDING\',\n    },\n    orderBy: { createdAt: \'desc\' },\n  });\n\n  // Get pending withdrawals\n  const pendingWithdrawals = await prisma.withdrawal.findMany({\n    where: { \n      userId,\n      status: { in: [\'PENDING\', \'PIN_REQUIRED\', \'APPROVED\', \'PROCESSING\'] },\n    },\n    orderBy: { createdAt: \'desc\' },\n  });\n\n  res.json({\n    success: true,\n    data: {\n      user,\n      activeInvestments,\n      recentTransactions,\n      pendingDeposits,\n      pendingWithdrawals,\n      summary: {\n        totalBalance: user.balance,\n        totalInvested: user.totalInvested,\n        totalEarnings: user.totalEarnings,\n        activeInvestments: activeInvestments.length,\n        pendingDeposits: pendingDeposits.length,\n        pendingWithdrawals: pendingWithdrawals.length,\n      },\n    },\n  });\n}));\n\n// Submit deposit\nrouter.post(\'/deposit\', [\n  authenticateUser,\n  body(\'amount\').isFloat({ min: 300 }),\n  body(\'cryptoType\').isIn([\'BTC\', \'ETH\', \'BNB\', \'USDT_ERC20\', \'USDT_BEP20\', \'USDT_TRC20\']),\n  body(\'transactionId\').optional().trim().isLength({ min: 10, max: 200 }),\n  body(\'walletAddress\').trim().isLength({ min: 20, max: 100 }),\n], asyncHandler(async (req: AuthRequest, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw createError(\'Validation failed\', 400);\n  }\n\n  const userId = req.user!.id;\n  const { amount, cryptoType, transactionId, walletAddress } = req.body;\n\n  // Validate wallet address format\n  if (!validateWalletAddress(walletAddress, cryptoType)) {\n    throw createError(\'Invalid wallet address format\', 400);\n  }\n\n  // Create deposit record\n  const deposit = await prisma.deposit.create({\n    data: {\n      userId,\n      amount,\n      cryptoType,\n      transactionId,\n      walletAddress,\n      status: \'PENDING\',\n    },\n  });\n\n  // Get user details for email\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: { firstName: true, email: true },\n  });\n\n  // Send deposit received email\n  await sendEmail({\n    to: user!.email,\n    template: \'depositReceived\',\n    data: {\n      firstName: user!.firstName,\n      amount: amount.toString(),\n      cryptoType,\n      transactionId: transactionId || \'Pending\',\n      logoUrl: `${process.env.FRONTEND_URL}/assets/brand/bluerock-logo.png`,\n    },\n  });\n\n  logger.info(`Deposit submitted by user ${user!.email}: $${amount} ${cryptoType}`);\n\n  res.status(201).json({\n    success: true,\n    message: \'Deposit submitted successfully. It will be confirmed within 24 hours.\',\n    data: { deposit },\n  });\n}));\n\n// Request withdrawal\nrouter.post(\'/withdrawal\', [\n  authenticateUser,\n  body(\'amount\').isFloat({ min: 10 }),\n  body(\'cryptoType\').isIn([\'BTC\', \'ETH\', \'BNB\', \'USDT_ERC20\', \'USDT_BEP20\', \'USDT_TRC20\']),\n  body(\'walletAddress\').trim().isLength({ min: 20, max: 100 }),\n], asyncHandler(async (req: AuthRequest, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw createError(\'Validation failed\', 400);\n  }\n\n  const userId = req.user!.id;\n  const { amount, cryptoType, walletAddress } = req.body;\n\n  // Validate wallet address format\n  if (!validateWalletAddress(walletAddress, cryptoType)) {\n    throw createError(\'Invalid wallet address format\', 400);\n  }\n\n  // Check user balance\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: { balance: true, firstName: true, email: true },\n  });\n\n  if (!user) {\n    throw createError(\'User not found\', 404);\n  }\n\n  if (parseFloat(user.balance.toString()) < amount) {\n    throw createError(\'Insufficient balance\', 400);\n  }\n\n  // Create withdrawal request\n  const withdrawal = await prisma.withdrawal.create({\n    data: {\n      userId,\n      amount,\n      cryptoType,\n      walletAddress,\n      status: \'PENDING\',\n    },\n  });\n\n  logger.info(`Withdrawal requested by user ${user.email}: $${amount} ${cryptoType}`);\n\n  res.status(201).json({\n    success: true,\n    message: \'Withdrawal request submitted. You will receive a PIN via live chat to complete the process.\',\n    data: { withdrawal },\n  });\n}));\n\n// Submit withdrawal PIN\nrouter.post(\'/withdrawal/:id/pin\', [\n  authenticateUser,\n  body(\'pin\').trim().isLength({ min: 6, max: 6 }).isNumeric(),\n], asyncHandler(async (req: AuthRequest, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw createError(\'Invalid PIN format\', 400);\n  }\n\n  const userId = req.user!.id;\n  const withdrawalId = req.params.id;\n  const { pin } = req.body;\n\n  // Find withdrawal\n  const withdrawal = await prisma.withdrawal.findFirst({\n    where: {\n      id: withdrawalId,\n      userId,\n      status: \'PIN_REQUIRED\',\n    },\n  });\n\n  if (!withdrawal) {\n    throw createError(\'Withdrawal not found or PIN not required\', 404);\n  }\n\n  // Find valid PIN\n  const withdrawalPin = await prisma.withdrawalPin.findFirst({\n    where: {\n      userId,\n      pin,\n      isUsed: false,\n      expiresAt: { gt: new Date() },\n    },\n  });\n\n  if (!withdrawalPin) {\n    throw createError(\'Invalid or expired PIN\', 400);\n  }\n\n  // Mark PIN as used\n  await prisma.withdrawalPin.update({\n    where: { id: withdrawalPin.id },\n    data: {\n      isUsed: true,\n      usedAt: new Date(),\n    },\n  });\n\n  // Update withdrawal status\n  await prisma.withdrawal.update({\n    where: { id: withdrawalId },\n    data: {\n      status: \'APPROVED\',\n      pinId: withdrawalPin.id,\n    },\n  });\n\n  logger.info(`Withdrawal PIN verified for user ${userId}, withdrawal ${withdrawalId}`);\n\n  res.json({\n    success: true,\n    message: \'PIN verified successfully. Your withdrawal is now approved and will be processed shortly.\',\n  });\n}));\n\n// Get transaction history\nrouter.get(\'/transactions\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n  const page = parseInt(req.query.page as string) || 1;\n  const limit = parseInt(req.query.limit as string) || 20;\n  const type = req.query.type as string;\n\n  const where: any = { userId };\n  if (type && [\'DEPOSIT\', \'WITHDRAWAL\', \'PAYOUT\', \'BONUS\', \'FEE\'].includes(type)) {\n    where.type = type;\n  }\n\n  const transactions = await prisma.transaction.findMany({\n    where,\n    orderBy: { createdAt: \'desc\' },\n    skip: (page - 1) * limit,\n    take: limit,\n  });\n\n  const total = await prisma.transaction.count({ where });\n\n  res.json({\n    success: true,\n    data: {\n      transactions,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit),\n      },\n    },\n  });\n}));\n\n// Get investment history\nrouter.get(\'/investments\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n\n  const investments = await prisma.investmentPlan.findMany({\n    where: { userId },\n    include: {\n      deposit: {\n        select: {\n          amount: true,\n          cryptoType: true,\n          createdAt: true,\n          confirmedAt: true,\n        },\n      },\n      payouts: {\n        orderBy: { weekNumber: \'asc\' },\n      },\n    },\n    orderBy: { createdAt: \'desc\' },\n  });\n\n  res.json({\n    success: true,\n    data: { investments },\n  });\n}));\n\n// Update profile\nrouter.put(\'/profile\', [\n  authenticateUser,\n  body(\'firstName\').optional().trim().isLength({ min: 2, max: 50 }),\n  body(\'lastName\').optional().trim().isLength({ min: 2, max: 50 }),\n  body(\'phone\').optional().isMobilePhone(\'any\'),\n  body(\'country\').optional().trim().isLength({ min: 2, max: 100 }),\n], asyncHandler(async (req: AuthRequest, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw createError(\'Validation failed\', 400);\n  }\n\n  const userId = req.user!.id;\n  const { firstName, lastName, phone, country } = req.body;\n\n  const updatedUser = await prisma.user.update({\n    where: { id: userId },\n    data: {\n      ...(firstName && { firstName }),\n      ...(lastName && { lastName }),\n      ...(phone && { phone }),\n      ...(country && { country }),\n    },\n    select: {\n      id: true,\n      email: true,\n      firstName: true,\n      lastName: true,\n      phone: true,\n      country: true,\n    },\n  });\n\n  res.json({\n    success: true,\n    message: \'Profile updated successfully\',\n    data: { user: updatedUser },\n  });\n}));\n\nexport default router;\n</create-file>\n</function_calls>'}