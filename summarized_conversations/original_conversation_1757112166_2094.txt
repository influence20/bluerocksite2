{'role': 'assistant', 'content': 'Now let me create the remaining backend routes and then move to the frontend:\n\n<function_calls>\n<create-file file_path="backend/src/routes/investment.ts">\nimport express from \'express\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { authenticateUser, AuthRequest } from \'../middleware/auth\';\nimport { asyncHandler } from \'../middleware/errorHandler\';\nimport { calculateInvestmentPlan, generateInvestmentExamples, getBlueRockWallets } from \'../utils/investment\';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Get investment calculator\nrouter.get(\'/calculator\', asyncHandler(async (req, res) => {\n  const amount = parseFloat(req.query.amount as string);\n\n  if (!amount || amount < 300) {\n    return res.json({\n      success: false,\n      error: \'Minimum investment amount is $300\',\n    });\n  }\n\n  const calculation = calculateInvestmentPlan(amount);\n\n  res.json({\n    success: true,\n    data: { calculation },\n  });\n}));\n\n// Get investment examples\nrouter.get(\'/examples\', asyncHandler(async (req, res) => {\n  const examples = generateInvestmentExamples();\n\n  res.json({\n    success: true,\n    data: { examples },\n  });\n}));\n\n// Get BlueRock wallet addresses\nrouter.get(\'/wallets\', asyncHandler(async (req, res) => {\n  const wallets = getBlueRockWallets();\n\n  res.json({\n    success: true,\n    data: { wallets },\n  });\n}));\n\n// Get user\'s active investment plans\nrouter.get(\'/plans\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n\n  const plans = await prisma.investmentPlan.findMany({\n    where: { userId },\n    include: {\n      deposit: {\n        select: {\n          amount: true,\n          cryptoType: true,\n          createdAt: true,\n          confirmedAt: true,\n        },\n      },\n      payouts: {\n        orderBy: { weekNumber: \'asc\' },\n      },\n    },\n    orderBy: { createdAt: \'desc\' },\n  });\n\n  res.json({\n    success: true,\n    data: { plans },\n  });\n}));\n\n// Get specific investment plan details\nrouter.get(\'/plans/:id\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n  const planId = req.params.id;\n\n  const plan = await prisma.investmentPlan.findFirst({\n    where: {\n      id: planId,\n      userId,\n    },\n    include: {\n      deposit: {\n        select: {\n          amount: true,\n          cryptoType: true,\n          transactionId: true,\n          createdAt: true,\n          confirmedAt: true,\n        },\n      },\n      payouts: {\n        orderBy: { weekNumber: \'asc\' },\n      },\n      user: {\n        select: {\n          firstName: true,\n          lastName: true,\n          email: true,\n        },\n      },\n    },\n  });\n\n  if (!plan) {\n    return res.status(404).json({\n      success: false,\n      error: \'Investment plan not found\',\n    });\n  }\n\n  res.json({\n    success: true,\n    data: { plan },\n  });\n}));\n\n// Get investment statistics\nrouter.get(\'/stats\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n\n  const [\n    totalInvested,\n    totalEarnings,\n    activeInvestments,\n    completedInvestments,\n    nextPayout,\n  ] = await Promise.all([\n    prisma.investmentPlan.aggregate({\n      where: { userId },\n      _sum: { amount: true },\n    }),\n    prisma.payout.aggregate({\n      where: {\n        investmentPlan: { userId },\n        status: \'COMPLETED\',\n      },\n      _sum: { amount: true },\n    }),\n    prisma.investmentPlan.count({\n      where: { userId, status: \'ACTIVE\' },\n    }),\n    prisma.investmentPlan.count({\n      where: { userId, status: \'COMPLETED\' },\n    }),\n    prisma.payout.findFirst({\n      where: {\n        investmentPlan: { userId },\n        status: \'SCHEDULED\',\n      },\n      orderBy: { scheduledDate: \'asc\' },\n      include: {\n        investmentPlan: {\n          select: { id: true },\n        },\n      },\n    }),\n  ]);\n\n  res.json({\n    success: true,\n    data: {\n      totalInvested: totalInvested._sum.amount || 0,\n      totalEarnings: totalEarnings._sum.amount || 0,\n      activeInvestments,\n      completedInvestments,\n      nextPayout,\n    },\n  });\n}));\n\nexport default router;\n</create-file>\n</function_calls>'}