{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="frontend/src/lib/auth.ts">\nimport { useState, useEffect, createContext, useContext, ReactNode } from \'react\';\nimport { authAPI } from \'./api\';\nimport toast from \'react-hot-toast\';\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  balance?: number;\n  totalInvested?: number;\n  totalEarnings?: number;\n  role?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  adminLogin: (email: string, password: string) => Promise<boolean>;\n  register: (data: RegisterData) => Promise<boolean>;\n  logout: () => void;\n  updateUser: (userData: Partial<User>) => void;\n}\n\ninterface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  country?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\'useAuth must be used within an AuthProvider\');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing auth token on mount\n    const token = localStorage.getItem(\'authToken\');\n    const userData = localStorage.getItem(\'user\');\n\n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error(\'Error parsing user data:\', error);\n        localStorage.removeItem(\'authToken\');\n        localStorage.removeItem(\'user\');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      const response = await authAPI.login({ email, password });\n      const { user: userData, token } = response.data.data;\n\n      localStorage.setItem(\'authToken\', token);\n      localStorage.setItem(\'user\', JSON.stringify(userData));\n      setUser(userData);\n\n      toast.success(\'Login successful!\');\n      return true;\n    } catch (error: any) {\n      const message = error.response?.data?.error?.message || \'Login failed\';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const adminLogin = async (email: string, password: string): Promise<boolean> => {\n    try {\n      const response = await authAPI.adminLogin({ email, password });\n      const { user: userData, token } = response.data.data;\n\n      localStorage.setItem(\'authToken\', token);\n      localStorage.setItem(\'user\', JSON.stringify(userData));\n      setUser(userData);\n\n      toast.success(\'Admin login successful!\');\n      return true;\n    } catch (error: any) {\n      const message = error.response?.data?.error?.message || \'Admin login failed\';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const register = async (data: RegisterData): Promise<boolean> => {\n    try {\n      const response = await authAPI.register(data);\n      const { user: userData, token } = response.data.data;\n\n      localStorage.setItem(\'authToken\', token);\n      localStorage.setItem(\'user\', JSON.stringify(userData));\n      setUser(userData);\n\n      toast.success(\'Registration successful! Welcome to BlueRock Asset Management.\');\n      return true;\n    } catch (error: any) {\n      const message = error.response?.data?.error?.message || \'Registration failed\';\n      toast.error(message);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\'authToken\');\n    localStorage.removeItem(\'user\');\n    setUser(null);\n    toast.success(\'Logged out successfully\');\n  };\n\n  const updateUser = (userData: Partial<User>) => {\n    if (user) {\n      const updatedUser = { ...user, ...userData };\n      setUser(updatedUser);\n      localStorage.setItem(\'user\', JSON.stringify(updatedUser));\n    }\n  };\n\n  const value = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    adminLogin,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Auth guard hook\nexport const useAuthGuard = (redirectTo: string = \'/login\') => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      window.location.href = redirectTo;\n    }\n  }, [isAuthenticated, isLoading, redirectTo]);\n\n  return { isAuthenticated, isLoading };\n};\n\n// Admin guard hook\nexport const useAdminGuard = (redirectTo: string = \'/admin/login\') => {\n  const { user, isLoading } = useAuth();\n  const isAdmin = user?.role && [\'SUPER_ADMIN\', \'ADMIN\', \'SUPPORT\'].includes(user.role);\n\n  useEffect(() => {\n    if (!isLoading && !isAdmin) {\n      window.location.href = redirectTo;\n    }\n  }, [isAdmin, isLoading, redirectTo]);\n\n  return { isAdmin, isLoading };\n};\n\n// Utility functions\nexport const getAuthToken = (): string | null => {\n  return localStorage.getItem(\'authToken\');\n};\n\nexport const isTokenExpired = (token: string): boolean => {\n  try {\n    const payload = JSON.parse(atob(token.split(\'.\')[1]));\n    return payload.exp * 1000 < Date.now();\n  } catch {\n    return true;\n  }\n};\n\nexport const formatUserName = (user: User | null): string => {\n  if (!user) return \'\';\n  return `${user.firstName} ${user.lastName}`;\n};\n\nexport const formatCurrency = (amount: number | string): string => {\n  const num = typeof amount === \'string\' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat(\'en-US\', {\n    style: \'currency\',\n    currency: \'USD\',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(num);\n};\n\nexport const formatPercentage = (value: number): string => {\n  return new Intl.NumberFormat(\'en-US\', {\n    style: \'percent\',\n    minimumFractionDigits: 1,\n    maximumFractionDigits: 2,\n  }).format(value / 100);\n};\n</create-file>\n</function_calls>'}