{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/src/index.ts">\nimport express from \'express\';\nimport cors from \'cors\';\nimport helmet from \'helmet\';\nimport rateLimit from \'express-rate-limit\';\nimport dotenv from \'dotenv\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { errorHandler } from \'./middleware/errorHandler\';\nimport { logger } from \'./utils/logger\';\nimport { startCronJobs } from \'./jobs/cronJobs\';\n\n// Import routes\nimport authRoutes from \'./routes/auth\';\nimport userRoutes from \'./routes/user\';\nimport adminRoutes from \'./routes/admin\';\nimport investmentRoutes from \'./routes/investment\';\nimport transactionRoutes from \'./routes/transaction\';\nimport publicRoutes from \'./routes/public\';\n\ndotenv.config();\n\nconst app = express();\nconst prisma = new PrismaClient();\nconst PORT = process.env.PORT || 3001;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: ["\'self\'"],\n      styleSrc: ["\'self\'", "\'unsafe-inline\'", "https://fonts.googleapis.com"],\n      fontSrc: ["\'self\'", "https://fonts.gstatic.com"],\n      imgSrc: ["\'self\'", "data:", "https:"],\n      scriptSrc: ["\'self\'", "https://code.jivosite.com"],\n      connectSrc: ["\'self\'", "https://api.bluerockasset.com"],\n    },\n  },\n}));\n\napp.use(cors({\n  origin: process.env.FRONTEND_URL || \'http://localhost:3000\',\n  credentials: true,\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: \'Too many requests from this IP, please try again later.\',\n});\n\napp.use(limiter);\n\n// Body parsing middleware\napp.use(express.json({ limit: \'10mb\' }));\napp.use(express.urlencoded({ extended: true }));\n\n// Health check endpoint\napp.get(\'/health\', (req, res) => {\n  res.json({ \n    status: \'OK\', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV || \'development\'\n  });\n});\n\n// API routes\napp.use(\'/api/auth\', authRoutes);\napp.use(\'/api/user\', userRoutes);\napp.use(\'/api/admin\', adminRoutes);\napp.use(\'/api/investment\', investmentRoutes);\napp.use(\'/api/transaction\', transactionRoutes);\napp.use(\'/api/public\', publicRoutes);\n\n// Error handling middleware\napp.use(errorHandler);\n\n// 404 handler\napp.use(\'*\', (req, res) => {\n  res.status(404).json({ \n    error: \'Route not found\',\n    path: req.originalUrl,\n    method: req.method\n  });\n});\n\n// Graceful shutdown\nprocess.on(\'SIGTERM\', async () => {\n  logger.info(\'SIGTERM received, shutting down gracefully\');\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\nprocess.on(\'SIGINT\', async () => {\n  logger.info(\'SIGINT received, shutting down gracefully\');\n  await prisma.$disconnect();\n  process.exit(0);\n});\n\n// Start server\napp.listen(PORT, () => {\n  logger.info(`🚀 BlueRock Asset Management API running on port ${PORT}`);\n  logger.info(`📊 Environment: ${process.env.NODE_ENV || \'development\'}`);\n  \n  // Start cron jobs for automated payouts\n  startCronJobs();\n  logger.info(\'⏰ Cron jobs started for automated payouts\');\n});\n\nexport default app;\n</create-file>\n</function_calls>'}