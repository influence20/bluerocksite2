{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/src/routes/transaction.ts">\nimport express from \'express\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { authenticateUser, AuthRequest } from \'../middleware/auth\';\nimport { asyncHandler } from \'../middleware/errorHandler\';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Get user transactions with filtering\nrouter.get(\'/\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n  const page = parseInt(req.query.page as string) || 1;\n  const limit = Math.min(parseInt(req.query.limit as string) || 20, 100);\n  const type = req.query.type as string;\n  const startDate = req.query.startDate as string;\n  const endDate = req.query.endDate as string;\n\n  const where: any = { userId };\n\n  // Filter by transaction type\n  if (type && [\'DEPOSIT\', \'WITHDRAWAL\', \'PAYOUT\', \'BONUS\', \'FEE\'].includes(type)) {\n    where.type = type;\n  }\n\n  // Filter by date range\n  if (startDate || endDate) {\n    where.createdAt = {};\n    if (startDate) {\n      where.createdAt.gte = new Date(startDate);\n    }\n    if (endDate) {\n      const end = new Date(endDate);\n      end.setHours(23, 59, 59, 999);\n      where.createdAt.lte = end;\n    }\n  }\n\n  const [transactions, total] = await Promise.all([\n    prisma.transaction.findMany({\n      where,\n      orderBy: { createdAt: \'desc\' },\n      skip: (page - 1) * limit,\n      take: limit,\n    }),\n    prisma.transaction.count({ where }),\n  ]);\n\n  res.json({\n    success: true,\n    data: {\n      transactions,\n      pagination: {\n        page,\n        limit,\n        total,\n        pages: Math.ceil(total / limit),\n        hasNext: page * limit < total,\n        hasPrev: page > 1,\n      },\n    },\n  });\n}));\n\n// Get transaction summary\nrouter.get(\'/summary\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n  const period = req.query.period as string || \'30d\'; // 7d, 30d, 90d, 1y\n\n  let startDate = new Date();\n  switch (period) {\n    case \'7d\':\n      startDate.setDate(startDate.getDate() - 7);\n      break;\n    case \'30d\':\n      startDate.setDate(startDate.getDate() - 30);\n      break;\n    case \'90d\':\n      startDate.setDate(startDate.getDate() - 90);\n      break;\n    case \'1y\':\n      startDate.setFullYear(startDate.getFullYear() - 1);\n      break;\n    default:\n      startDate.setDate(startDate.getDate() - 30);\n  }\n\n  const summary = await prisma.transaction.groupBy({\n    by: [\'type\'],\n    where: {\n      userId,\n      createdAt: { gte: startDate },\n    },\n    _sum: { amount: true },\n    _count: { id: true },\n  });\n\n  const formattedSummary = summary.reduce((acc, item) => {\n    acc[item.type] = {\n      total: item._sum.amount || 0,\n      count: item._count.id,\n    };\n    return acc;\n  }, {} as Record<string, { total: number; count: number }>);\n\n  res.json({\n    success: true,\n    data: {\n      period,\n      summary: formattedSummary,\n    },\n  });\n}));\n\n// Get specific transaction details\nrouter.get(\'/:id\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n  const transactionId = req.params.id;\n\n  const transaction = await prisma.transaction.findFirst({\n    where: {\n      id: transactionId,\n      userId,\n    },\n  });\n\n  if (!transaction) {\n    return res.status(404).json({\n      success: false,\n      error: \'Transaction not found\',\n    });\n  }\n\n  res.json({\n    success: true,\n    data: { transaction },\n  });\n}));\n\n// Export transactions to CSV (for user)\nrouter.get(\'/export/csv\', authenticateUser, asyncHandler(async (req: AuthRequest, res) => {\n  const userId = req.user!.id;\n  const startDate = req.query.startDate as string;\n  const endDate = req.query.endDate as string;\n\n  const where: any = { userId };\n\n  if (startDate || endDate) {\n    where.createdAt = {};\n    if (startDate) {\n      where.createdAt.gte = new Date(startDate);\n    }\n    if (endDate) {\n      const end = new Date(endDate);\n      end.setHours(23, 59, 59, 999);\n      where.createdAt.lte = end;\n    }\n  }\n\n  const transactions = await prisma.transaction.findMany({\n    where,\n    orderBy: { createdAt: \'desc\' },\n  });\n\n  // Generate CSV content\n  const csvHeader = \'Date,Type,Amount,Description,Reference,Status\\n\';\n  const csvRows = transactions.map(tx => \n    `${tx.createdAt.toISOString()},${tx.type},${tx.amount},${tx.description},${tx.reference || \'\'},${tx.status}`\n  ).join(\'\\n\');\n\n  const csvContent = csvHeader + csvRows;\n\n  res.setHeader(\'Content-Type\', \'text/csv\');\n  res.setHeader(\'Content-Disposition\', \'attachment; filename=transactions.csv\');\n  res.send(csvContent);\n}));\n\nexport default router;\n</create-file>\n</function_calls>'}