{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/src/middleware/auth.ts">\nimport { Request, Response, NextFunction } from \'express\';\nimport jwt from \'jsonwebtoken\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { createError } from \'./errorHandler\';\n\nconst prisma = new PrismaClient();\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role?: string;\n  };\n}\n\nexport const authenticateUser = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.header(\'Authorization\')?.replace(\'Bearer \', \'\');\n\n    if (!token) {\n      throw createError(\'Access denied. No token provided.\', 401);\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;\n    \n    // Verify user still exists and is active\n    const user = await prisma.user.findUnique({\n      where: { id: decoded.userId },\n      select: { id: true, email: true, isActive: true }\n    });\n\n    if (!user || !user.isActive) {\n      throw createError(\'Invalid token or user deactivated.\', 401);\n    }\n\n    req.user = {\n      id: user.id,\n      email: user.email\n    };\n\n    next();\n  } catch (error) {\n    if (error instanceof jwt.JsonWebTokenError) {\n      next(createError(\'Invalid token.\', 401));\n    } else {\n      next(error);\n    }\n  }\n};\n\nexport const authenticateAdmin = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.header(\'Authorization\')?.replace(\'Bearer \', \'\');\n\n    if (!token) {\n      throw createError(\'Access denied. No token provided.\', 401);\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any;\n    \n    // Verify admin user exists and is active\n    const adminUser = await prisma.adminUser.findUnique({\n      where: { id: decoded.userId },\n      select: { id: true, email: true, role: true, isActive: true }\n    });\n\n    if (!adminUser || !adminUser.isActive) {\n      throw createError(\'Invalid token or admin user deactivated.\', 401);\n    }\n\n    req.user = {\n      id: adminUser.id,\n      email: adminUser.email,\n      role: adminUser.role\n    };\n\n    next();\n  } catch (error) {\n    if (error instanceof jwt.JsonWebTokenError) {\n      next(createError(\'Invalid token.\', 401));\n    } else {\n      next(error);\n    }\n  }\n};\n\nexport const requireRole = (roles: string[]) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user?.role || !roles.includes(req.user.role)) {\n      return next(createError(\'Insufficient permissions.\', 403));\n    }\n    next();\n  };\n};\n</create-file>\n</function_calls>'}