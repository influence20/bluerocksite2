{'role': 'assistant', 'content': '\n<function_calls>\n<create-file file_path="frontend/src/lib/utils.ts">\nimport { clsx, type ClassValue } from \'clsx\';\n\nexport function cn(...inputs: ClassValue[]) {\n  return clsx(inputs);\n}\n\n// Date formatting utilities\nexport const formatDate = (date: string | Date): string => {\n  const d = new Date(date);\n  return d.toLocaleDateString(\'en-US\', {\n    year: \'numeric\',\n    month: \'short\',\n    day: \'numeric\',\n  });\n};\n\nexport const formatDateTime = (date: string | Date): string => {\n  const d = new Date(date);\n  return d.toLocaleString(\'en-US\', {\n    year: \'numeric\',\n    month: \'short\',\n    day: \'numeric\',\n    hour: \'2-digit\',\n    minute: \'2-digit\',\n  });\n};\n\nexport const formatRelativeTime = (date: string | Date): string => {\n  const d = new Date(date);\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - d.getTime()) / 1000);\n\n  if (diffInSeconds < 60) return \'Just now\';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  \n  return formatDate(date);\n};\n\n// Currency formatting\nexport const formatCurrency = (amount: number | string, currency: string = \'USD\'): string => {\n  const num = typeof amount === \'string\' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat(\'en-US\', {\n    style: \'currency\',\n    currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(num);\n};\n\nexport const formatNumber = (num: number): string => {\n  return new Intl.NumberFormat(\'en-US\').format(num);\n};\n\nexport const formatCompactNumber = (num: number): string => {\n  return new Intl.NumberFormat(\'en-US\', {\n    notation: \'compact\',\n    maximumFractionDigits: 1,\n  }).format(num);\n};\n\n// Investment calculations\nexport const calculateWeeklyPayout = (investment: number): number => {\n  return (investment / 500) * 300;\n};\n\nexport const calculateTotalReturns = (investment: number): number => {\n  const weeklyPayout = calculateWeeklyPayout(investment);\n  return weeklyPayout * 8; // 8 weeks\n};\n\nexport const calculateROI = (investment: number): number => {\n  const totalReturns = calculateTotalReturns(investment);\n  return ((totalReturns - investment) / investment) * 100;\n};\n\n// Validation utilities\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const validatePassword = (password: string): {\n  isValid: boolean;\n  errors: string[];\n} => {\n  const errors: string[] = [];\n  \n  if (password.length < 8) {\n    errors.push(\'Password must be at least 8 characters long\');\n  }\n  \n  if (!/[a-z]/.test(password)) {\n    errors.push(\'Password must contain at least one lowercase letter\');\n  }\n  \n  if (!/[A-Z]/.test(password)) {\n    errors.push(\'Password must contain at least one uppercase letter\');\n  }\n  \n  if (!/\\d/.test(password)) {\n    errors.push(\'Password must contain at least one number\');\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\nexport const validateWalletAddress = (address: string, cryptoType: string): boolean => {\n  const patterns = {\n    BTC: /^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/,\n    ETH: /^0x[a-fA-F0-9]{40}$/,\n    BNB: /^0x[a-fA-F0-9]{40}$/,\n    USDT_ERC20: /^0x[a-fA-F0-9]{40}$/,\n    USDT_BEP20: /^0x[a-fA-F0-9]{40}$/,\n    USDT_TRC20: /^T[A-Za-z1-9]{33}$/,\n  };\n\n  const pattern = patterns[cryptoType as keyof typeof patterns];\n  return pattern ? pattern.test(address) : false;\n};\n\n// Status utilities\nexport const getStatusColor = (status: string): string => {\n  const statusColors = {\n    PENDING: \'warning\',\n    CONFIRMED: \'success\',\n    REJECTED: \'error\',\n    ACTIVE: \'success\',\n    COMPLETED: \'success\',\n    CANCELLED: \'error\',\n    SCHEDULED: \'info\',\n    PROCESSING: \'warning\',\n    FAILED: \'error\',\n    SENT: \'success\',\n    BOUNCED: \'error\',\n    PIN_REQUIRED: \'warning\',\n    APPROVED: \'success\',\n  };\n\n  return statusColors[status as keyof typeof statusColors] || \'secondary\';\n};\n\nexport const getStatusText = (status: string): string => {\n  const statusTexts = {\n    PENDING: \'Pending\',\n    CONFIRMED: \'Confirmed\',\n    REJECTED: \'Rejected\',\n    ACTIVE: \'Active\',\n    COMPLETED: \'Completed\',\n    CANCELLED: \'Cancelled\',\n    SCHEDULED: \'Scheduled\',\n    PROCESSING: \'Processing\',\n    FAILED: \'Failed\',\n    SENT: \'Sent\',\n    BOUNCED: \'Bounced\',\n    PIN_REQUIRED: \'PIN Required\',\n    APPROVED: \'Approved\',\n  };\n\n  return statusTexts[status as keyof typeof statusTexts] || status;\n};\n\n// Crypto utilities\nexport const getCryptoName = (cryptoType: string): string => {\n  const cryptoNames = {\n    BTC: \'Bitcoin\',\n    ETH: \'Ethereum\',\n    BNB: \'Binance Coin\',\n    USDT_ERC20: \'USDT (ERC20)\',\n    USDT_BEP20: \'USDT (BEP20)\',\n    USDT_TRC20: \'USDT (TRC20)\',\n  };\n\n  return cryptoNames[cryptoType as keyof typeof cryptoNames] || cryptoType;\n};\n\nexport const getCryptoIcon = (cryptoType: string): string => {\n  const cryptoIcons = {\n    BTC: \'₿\',\n    ETH: \'Ξ\',\n    BNB: \'BNB\',\n    USDT_ERC20: \'₮\',\n    USDT_BEP20: \'₮\',\n    USDT_TRC20: \'₮\',\n  };\n\n  return cryptoIcons[cryptoType as keyof typeof cryptoIcons] || \'₿\';\n};\n\n// URL utilities\nexport const generateShareUrl = (path: string): string => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || \'https://bluerockasset.com\';\n  return `${baseUrl}${path}`;\n};\n\nexport const copyToClipboard = async (text: string): Promise<boolean> => {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Fallback for older browsers\n    const textArea = document.createElement(\'textarea\');\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    try {\n      document.execCommand(\'copy\');\n      document.body.removeChild(textArea);\n      return true;\n    } catch (err) {\n      document.body.removeChild(textArea);\n      return false;\n    }\n  }\n};\n\n// File utilities\nexport const downloadBlob = (blob: Blob, filename: string): void => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement(\'a\');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};\n\n// Animation utilities\nexport const sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n};\n\n// Local storage utilities\nexport const getFromStorage = <T>(key: string, defaultValue: T): T => {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n};\n\nexport const setToStorage = <T>(key: string, value: T): void => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error(\'Error saving to localStorage:\', error);\n  }\n};\n\nexport const removeFromStorage = (key: string): void => {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(\'Error removing from localStorage:\', error);\n  }\n};\n\n// SEO utilities\nexport const generateMetaTags = (data: {\n  title: string;\n  description: string;\n  image?: string;\n  url?: string;\n}) => {\n  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || \'https://bluerockasset.com\';\n  const defaultImage = `${baseUrl}/assets/brand/bluerock-logo.png`;\n\n  return {\n    title: data.title,\n    description: data.description,\n    openGraph: {\n      title: data.title,\n      description: data.description,\n      url: data.url || baseUrl,\n      siteName: \'BlueRock Asset Management\',\n      images: [\n        {\n          url: data.image || defaultImage,\n          width: 1200,\n          height: 630,\n          alt: data.title,\n        },\n      ],\n      locale: \'en_US\',\n      type: \'website\',\n    },\n    twitter: {\n      card: \'summary_large_image\',\n      title: data.title,\n      description: data.description,\n      images: [data.image || defaultImage],\n    },\n  };\n};\n\n// Error handling utilities\nexport const getErrorMessage = (error: any): string => {\n  if (error.response?.data?.error?.message) {\n    return error.response.data.error.message;\n  }\n  if (error.message) {\n    return error.message;\n  }\n  return \'An unexpected error occurred\';\n};\n\nexport const isNetworkError = (error: any): boolean => {\n  return !error.response && error.request;\n};\n\n// Debounce utility\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): ((...args: Parameters<T>) => void) => {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n};\n\n// Throttle utility\nexport const throttle = <T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): ((...args: Parameters<T>) => void) => {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n};\n</create-file>\n</function_calls>'}