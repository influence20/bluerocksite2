{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="backend/src/routes/public.ts">\nimport express from \'express\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { body, validationResult } from \'express-validator\';\nimport { asyncHandler, createError } from \'../middleware/errorHandler\';\nimport { sendEmail } from \'../utils/email\';\nimport { generateInvestmentExamples, getBlueRockWallets } from \'../utils/investment\';\n\nconst router = express.Router();\nconst prisma = new PrismaClient();\n\n// Contact form submission\nrouter.post(\'/contact\', [\n  body(\'name\').trim().isLength({ min: 2, max: 100 }),\n  body(\'email\').isEmail().normalizeEmail(),\n  body(\'subject\').trim().isLength({ min: 5, max: 200 }),\n  body(\'message\').trim().isLength({ min: 10, max: 2000 }),\n], asyncHandler(async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    throw createError(\'Validation failed\', 400);\n  }\n\n  const { name, email, subject, message } = req.body;\n\n  // Send email to BlueRock support\n  await sendEmail({\n    to: process.env.ZOHO_EMAIL!,\n    template: \'contactForm\',\n    data: {\n      name,\n      email,\n      subject,\n      message,\n      timestamp: new Date().toISOString(),\n    },\n  });\n\n  // Send confirmation email to user\n  await sendEmail({\n    to: email,\n    template: \'contactConfirmation\',\n    data: {\n      name,\n      subject,\n      logoUrl: `${process.env.FRONTEND_URL}/assets/brand/bluerock-logo.png`,\n    },\n  });\n\n  res.json({\n    success: true,\n    message: \'Thank you for your message. We will get back to you within 24 hours.\',\n  });\n}));\n\n// Get investment examples for public display\nrouter.get(\'/investment-examples\', asyncHandler(async (req, res) => {\n  const examples = generateInvestmentExamples();\n\n  res.json({\n    success: true,\n    data: { examples },\n  });\n}));\n\n// Get crypto wallet addresses for deposits\nrouter.get(\'/wallets\', asyncHandler(async (req, res) => {\n  const wallets = getBlueRockWallets();\n\n  res.json({\n    success: true,\n    data: { wallets },\n  });\n}));\n\n// Newsletter subscription\nrouter.post(\'/newsletter\', [\n  body(\'email\').isEmail().normalizeEmail(),\n], asyncHandler(async (req, res) => {\n  const { email } = req.body;\n\n  // Store newsletter subscription (you might want to use a separate table)\n  // For now, we\'ll just send a confirmation email\n\n  await sendEmail({\n    to: email,\n    template: \'newsletterSubscription\',\n    data: {\n      email,\n      logoUrl: `${process.env.FRONTEND_URL}/assets/brand/bluerock-logo.png`,\n    },\n  });\n\n  res.json({\n    success: true,\n    message: \'Successfully subscribed to our newsletter.\',\n  });\n}));\n\n// Get public statistics (anonymized)\nrouter.get(\'/stats\', asyncHandler(async (req, res) => {\n  const [\n    totalUsers,\n    totalInvestments,\n    totalPayouts,\n    activeInvestments,\n  ] = await Promise.all([\n    prisma.user.count(),\n    prisma.investmentPlan.count(),\n    prisma.payout.count({ where: { status: \'COMPLETED\' } }),\n    prisma.investmentPlan.count({ where: { status: \'ACTIVE\' } }),\n  ]);\n\n  res.json({\n    success: true,\n    data: {\n      totalUsers,\n      totalInvestments,\n      totalPayouts,\n      activeInvestments,\n    },\n  });\n}));\n\n// Health check for public API\nrouter.get(\'/health\', (req, res) => {\n  res.json({\n    success: true,\n    status: \'BlueRock Asset Management API is running\',\n    timestamp: new Date().toISOString(),\n  });\n});\n\nexport default router;\n</create-file>\n</function_calls>'}