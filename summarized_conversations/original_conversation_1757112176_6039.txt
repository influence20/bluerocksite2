{'role': 'assistant', 'content': 'Now let me create the core frontend components and utilities:\n\n<function_calls>\n<create-file file_path="frontend/src/lib/api.ts">\nimport axios from \'axios\';\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \'http://localhost:3001/api\';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    \'Content-Type\': \'application/json\',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\'authToken\');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Clear token and redirect to login\n      localStorage.removeItem(\'authToken\');\n      localStorage.removeItem(\'user\');\n      window.location.href = \'/login\';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (data: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    phone?: string;\n    country?: string;\n  }) => api.post(\'/auth/register\', data),\n\n  login: (data: { email: string; password: string }) =>\n    api.post(\'/auth/login\', data),\n\n  adminLogin: (data: { email: string; password: string }) =>\n    api.post(\'/auth/admin/login\', data),\n\n  forgotPassword: (data: { email: string }) =>\n    api.post(\'/auth/forgot-password\', data),\n\n  resetPassword: (data: { token: string; password: string }) =>\n    api.post(\'/auth/reset-password\', data),\n};\n\n// User API\nexport const userAPI = {\n  getDashboard: () => api.get(\'/user/dashboard\'),\n  \n  submitDeposit: (data: {\n    amount: number;\n    cryptoType: string;\n    transactionId?: string;\n    walletAddress: string;\n  }) => api.post(\'/user/deposit\', data),\n\n  requestWithdrawal: (data: {\n    amount: number;\n    cryptoType: string;\n    walletAddress: string;\n  }) => api.post(\'/user/withdrawal\', data),\n\n  submitWithdrawalPin: (withdrawalId: string, pin: string) =>\n    api.post(`/user/withdrawal/${withdrawalId}/pin`, { pin }),\n\n  getTransactions: (params?: {\n    page?: number;\n    limit?: number;\n    type?: string;\n    startDate?: string;\n    endDate?: string;\n  }) => api.get(\'/user/transactions\', { params }),\n\n  getInvestments: () => api.get(\'/user/investments\'),\n\n  updateProfile: (data: {\n    firstName?: string;\n    lastName?: string;\n    phone?: string;\n    country?: string;\n  }) => api.put(\'/user/profile\', data),\n\n  exportTransactions: (params?: {\n    startDate?: string;\n    endDate?: string;\n  }) => api.get(\'/user/transactions/export/csv\', { \n    params,\n    responseType: \'blob\',\n  }),\n};\n\n// Investment API\nexport const investmentAPI = {\n  getCalculator: (amount: number) =>\n    api.get(\'/investment/calculator\', { params: { amount } }),\n\n  getExamples: () => api.get(\'/investment/examples\'),\n\n  getWallets: () => api.get(\'/investment/wallets\'),\n\n  getPlans: () => api.get(\'/investment/plans\'),\n\n  getPlan: (id: string) => api.get(`/investment/plans/${id}`),\n\n  getStats: () => api.get(\'/investment/stats\'),\n};\n\n// Transaction API\nexport const transactionAPI = {\n  getTransactions: (params?: {\n    page?: number;\n    limit?: number;\n    type?: string;\n    startDate?: string;\n    endDate?: string;\n  }) => api.get(\'/transaction\', { params }),\n\n  getSummary: (period?: string) =>\n    api.get(\'/transaction/summary\', { params: { period } }),\n\n  getTransaction: (id: string) => api.get(`/transaction/${id}`),\n\n  exportCSV: (params?: {\n    startDate?: string;\n    endDate?: string;\n  }) => api.get(\'/transaction/export/csv\', { \n    params,\n    responseType: \'blob\',\n  }),\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboard: () => api.get(\'/admin/dashboard\'),\n\n  getUsers: (params?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n  }) => api.get(\'/admin/users\', { params }),\n\n  getPendingDeposits: () => api.get(\'/admin/deposits/pending\'),\n\n  confirmDeposit: (id: string, data?: { transactionId?: string }) =>\n    api.post(`/admin/deposits/${id}/confirm`, data),\n\n  rejectDeposit: (id: string, reason: string) =>\n    api.post(`/admin/deposits/${id}/reject`, { reason }),\n\n  getPendingWithdrawals: () => api.get(\'/admin/withdrawals/pending\'),\n\n  generateWithdrawalPin: (id: string) =>\n    api.post(`/admin/withdrawals/${id}/generate-pin`),\n\n  approveWithdrawal: (id: string, transactionId: string) =>\n    api.post(`/admin/withdrawals/${id}/approve`, { transactionId }),\n\n  getAuditLogs: (params?: {\n    page?: number;\n    limit?: number;\n    action?: string;\n    entity?: string;\n  }) => api.get(\'/admin/audit-logs\', { params }),\n\n  createAdminUser: (data: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n  }) => api.post(\'/admin/users\', data),\n};\n\n// Public API\nexport const publicAPI = {\n  contact: (data: {\n    name: string;\n    email: string;\n    subject: string;\n    message: string;\n  }) => api.post(\'/public/contact\', data),\n\n  getInvestmentExamples: () => api.get(\'/public/investment-examples\'),\n\n  getWallets: () => api.get(\'/public/wallets\'),\n\n  subscribeNewsletter: (email: string) =>\n    api.post(\'/public/newsletter\', { email }),\n\n  getStats: () => api.get(\'/public/stats\'),\n\n  healthCheck: () => api.get(\'/public/health\'),\n};\n\nexport default api;\n</create-file>\n</function_calls>'}