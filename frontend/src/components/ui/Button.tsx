import React from 'react';import { cn } from '@/lib/utils';interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';  size?: 'sm' | 'md' | 'lg';  isLoading?: boolean;  leftIcon?: React.ReactNode;  rightIcon?: React.ReactNode;}const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(  ({     className,     variant = 'primary',     size = 'md',     isLoading = false,    leftIcon,    rightIcon,    children,     disabled,    ...props   }, ref) => {    const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';        const variants = {      primary: 'bg-primary-500 text-white hover:bg-primary-600 focus:ring-primary-500 shadow-md hover:shadow-lg transform hover:-translate-y-0.5',      secondary: 'bg-white text-primary-500 border-2 border-primary-500 hover:bg-primary-50 focus:ring-primary-500',      outline: 'bg-transparent text-secondary-700 border-2 border-secondary-300 hover:bg-secondary-50 focus:ring-secondary-500',      ghost: 'bg-transparent text-secondary-600 hover:bg-secondary-100 focus:ring-secondary-500',      danger: 'bg-error-500 text-white hover:bg-error-600 focus:ring-error-500 shadow-md hover:shadow-lg',    };    const sizes = {      sm: 'px-4 py-2 text-sm',      md: 'px-6 py-3 text-base',      lg: 'px-8 py-4 text-lg',    };    return (      <button        className={cn(          baseClasses,          variants[variant],          sizes[size],          isLoading && 'cursor-not-allowed',          className        )}        disabled={disabled || isLoading}        ref={ref}        {...props}      >        {isLoading && (          <svg            className="animate-spin -ml-1 mr-3 h-5 w-5"            xmlns="http://www.w3.org/2000/svg"            fill="none"            viewBox="0 0 24 24"          >            <circle              className="opacity-25"              cx="12"              cy="12"              r="10"              stroke="currentColor"              strokeWidth="4"            />            <path              className="opacity-75"              fill="currentColor"              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"            />          </svg>        )}        {!isLoading && leftIcon && (          <span className="mr-2">{leftIcon}</span>        )}        {children}        {!isLoading && rightIcon && (          <span className="ml-2">{rightIcon}</span>        )}      </button>    );  });Button.displayName = 'Button';export default Button;