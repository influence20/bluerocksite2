import { clsx, type ClassValue } from 'clsx';export function cn(...inputs: ClassValue[]) {  return clsx(inputs);}// Date formatting utilitiesexport const formatDate = (date: string | Date): string => {  const d = new Date(date);  return d.toLocaleDateString('en-US', {    year: 'numeric',    month: 'short',    day: 'numeric',  });};export const formatDateTime = (date: string | Date): string => {  const d = new Date(date);  return d.toLocaleString('en-US', {    year: 'numeric',    month: 'short',    day: 'numeric',    hour: '2-digit',    minute: '2-digit',  });};export const formatRelativeTime = (date: string | Date): string => {  const d = new Date(date);  const now = new Date();  const diffInSeconds = Math.floor((now.getTime() - d.getTime()) / 1000);  if (diffInSeconds < 60) return 'Just now';  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;    return formatDate(date);};// Currency formattingexport const formatCurrency = (amount: number | string, currency: string = 'USD'): string => {  const num = typeof amount === 'string' ? parseFloat(amount) : amount;  return new Intl.NumberFormat('en-US', {    style: 'currency',    currency,    minimumFractionDigits: 2,    maximumFractionDigits: 2,  }).format(num);};export const formatNumber = (num: number): string => {  return new Intl.NumberFormat('en-US').format(num);};export const formatCompactNumber = (num: number): string => {  return new Intl.NumberFormat('en-US', {    notation: 'compact',    maximumFractionDigits: 1,  }).format(num);};// Investment calculationsexport const calculateWeeklyPayout = (investment: number): number => {  return (investment / 500) * 300;};export const calculateTotalReturns = (investment: number): number => {  const weeklyPayout = calculateWeeklyPayout(investment);  return weeklyPayout * 8; // 8 weeks};export const calculateROI = (investment: number): number => {  const totalReturns = calculateTotalReturns(investment);  return ((totalReturns - investment) / investment) * 100;};// Validation utilitiesexport const validateEmail = (email: string): boolean => {  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;  return emailRegex.test(email);};export const validatePassword = (password: string): {  isValid: boolean;  errors: string[];} => {  const errors: string[] = [];    if (password.length < 8) {    errors.push('Password must be at least 8 characters long');  }    if (!/[a-z]/.test(password)) {    errors.push('Password must contain at least one lowercase letter');  }    if (!/[A-Z]/.test(password)) {    errors.push('Password must contain at least one uppercase letter');  }    if (!/\d/.test(password)) {    errors.push('Password must contain at least one number');  }    return {    isValid: errors.length === 0,    errors,  };};export const validateWalletAddress = (address: string, cryptoType: string): boolean => {  const patterns = {    BTC: /^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$/,    ETH: /^0x[a-fA-F0-9]{40}$/,    BNB: /^0x[a-fA-F0-9]{40}$/,    USDT_ERC20: /^0x[a-fA-F0-9]{40}$/,    USDT_BEP20: /^0x[a-fA-F0-9]{40}$/,    USDT_TRC20: /^T[A-Za-z1-9]{33}$/,  };  const pattern = patterns[cryptoType as keyof typeof patterns];  return pattern ? pattern.test(address) : false;};// Status utilitiesexport const getStatusColor = (status: string): string => {  const statusColors = {    PENDING: 'warning',    CONFIRMED: 'success',    REJECTED: 'error',    ACTIVE: 'success',    COMPLETED: 'success',    CANCELLED: 'error',    SCHEDULED: 'info',    PROCESSING: 'warning',    FAILED: 'error',    SENT: 'success',    BOUNCED: 'error',    PIN_REQUIRED: 'warning',    APPROVED: 'success',  };  return statusColors[status as keyof typeof statusColors] || 'secondary';};export const getStatusText = (status: string): string => {  const statusTexts = {    PENDING: 'Pending',    CONFIRMED: 'Confirmed',    REJECTED: 'Rejected',    ACTIVE: 'Active',    COMPLETED: 'Completed',    CANCELLED: 'Cancelled',    SCHEDULED: 'Scheduled',    PROCESSING: 'Processing',    FAILED: 'Failed',    SENT: 'Sent',    BOUNCED: 'Bounced',    PIN_REQUIRED: 'PIN Required',    APPROVED: 'Approved',  };  return statusTexts[status as keyof typeof statusTexts] || status;};// Crypto utilitiesexport const getCryptoName = (cryptoType: string): string => {  const cryptoNames = {    BTC: 'Bitcoin',    ETH: 'Ethereum',    BNB: 'Binance Coin',    USDT_ERC20: 'USDT (ERC20)',    USDT_BEP20: 'USDT (BEP20)',    USDT_TRC20: 'USDT (TRC20)',  };  return cryptoNames[cryptoType as keyof typeof cryptoNames] || cryptoType;};export const getCryptoIcon = (cryptoType: string): string => {  const cryptoIcons = {    BTC: '₿',    ETH: 'Ξ',    BNB: 'BNB',    USDT_ERC20: '₮',    USDT_BEP20: '₮',    USDT_TRC20: '₮',  };  return cryptoIcons[cryptoType as keyof typeof cryptoIcons] || '₿';};// URL utilitiesexport const generateShareUrl = (path: string): string => {  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://bluerockasset.com';  return `${baseUrl}${path}`;};export const copyToClipboard = async (text: string): Promise<boolean> => {  try {    await navigator.clipboard.writeText(text);    return true;  } catch (error) {    // Fallback for older browsers    const textArea = document.createElement('textarea');    textArea.value = text;    document.body.appendChild(textArea);    textArea.focus();    textArea.select();    try {      document.execCommand('copy');      document.body.removeChild(textArea);      return true;    } catch (err) {      document.body.removeChild(textArea);      return false;    }  }};// File utilitiesexport const downloadBlob = (blob: Blob, filename: string): void => {  const url = window.URL.createObjectURL(blob);  const link = document.createElement('a');  link.href = url;  link.download = filename;  document.body.appendChild(link);  link.click();  document.body.removeChild(link);  window.URL.revokeObjectURL(url);};// Animation utilitiesexport const sleep = (ms: number): Promise<void> => {  return new Promise(resolve => setTimeout(resolve, ms));};export const easeInOutCubic = (t: number): number => {  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;};// Local storage utilitiesexport const getFromStorage = <T>(key: string, defaultValue: T): T => {  try {    const item = localStorage.getItem(key);    return item ? JSON.parse(item) : defaultValue;  } catch {    return defaultValue;  }};export const setToStorage = <T>(key: string, value: T): void => {  try {    localStorage.setItem(key, JSON.stringify(value));  } catch (error) {    console.error('Error saving to localStorage:', error);  }};export const removeFromStorage = (key: string): void => {  try {    localStorage.removeItem(key);  } catch (error) {    console.error('Error removing from localStorage:', error);  }};// SEO utilitiesexport const generateMetaTags = (data: {  title: string;  description: string;  image?: string;  url?: string;}) => {  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'https://bluerockasset.com';  const defaultImage = `${baseUrl}/assets/brand/bluerock-logo.png`;  return {    title: data.title,    description: data.description,    openGraph: {      title: data.title,      description: data.description,      url: data.url || baseUrl,      siteName: 'BlueRock Asset Management',      images: [        {          url: data.image || defaultImage,          width: 1200,          height: 630,          alt: data.title,        },      ],      locale: 'en_US',      type: 'website',    },    twitter: {      card: 'summary_large_image',      title: data.title,      description: data.description,      images: [data.image || defaultImage],    },  };};// Error handling utilitiesexport const getErrorMessage = (error: any): string => {  if (error.response?.data?.error?.message) {    return error.response.data.error.message;  }  if (error.message) {    return error.message;  }  return 'An unexpected error occurred';};export const isNetworkError = (error: any): boolean => {  return !error.response && error.request;};// Debounce utilityexport const debounce = <T extends (...args: any[]) => any>(  func: T,  wait: number): ((...args: Parameters<T>) => void) => {  let timeout: NodeJS.Timeout;  return (...args: Parameters<T>) => {    clearTimeout(timeout);    timeout = setTimeout(() => func(...args), wait);  };};// Throttle utilityexport const throttle = <T extends (...args: any[]) => any>(  func: T,  limit: number): ((...args: Parameters<T>) => void) => {  let inThrottle: boolean;  return (...args: Parameters<T>) => {    if (!inThrottle) {      func(...args);      inThrottle = true;      setTimeout(() => (inThrottle = false), limit);    }  };};